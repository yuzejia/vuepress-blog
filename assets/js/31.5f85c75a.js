(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{388:function(n,t,e){"use strict";e.r(t);var v=e(0),_=Object(v.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[e("strong",[n._v("ngOnChanges()")])]),n._v(" "),e("p",[n._v("当 Angular（重新）设置数据绑定输入属性时响应。 该方法接受当前和上一属性值的 SimpleChanges 对象")]),n._v(" "),e("p",[n._v("在 ngOnInit() 之前以及所绑定的一个或多个输入属性的值发生变化时都会调用。")]),n._v(" "),e("p",[e("strong",[n._v("ngOnInit()")])]),n._v(" "),e("p",[n._v("在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。")]),n._v(" "),e("p",[n._v("在第一轮 ngOnChanges() 完成之后调用，只调用一次。")]),n._v(" "),e("p",[e("strong",[n._v("ngDoCheck()")])]),n._v(" "),e("p",[n._v("检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。")]),n._v(" "),e("p",[n._v("在每个变更检测周期中，紧跟在 ngOnChanges() 和 ngOnInit() 后面调用。")]),n._v(" "),e("p",[e("strong",[n._v("ngAfterContentInit()")])]),n._v(" "),e("p",[n._v("当 Angular 把外部内容投影进组件/指令的视图之后调用。")]),n._v(" "),e("p",[n._v("第一次 ngDoCheck() 之后调用，只调用一次。")]),n._v(" "),e("p",[e("strong",[n._v("ngAfterContentChecked()")])]),n._v(" "),e("p",[n._v("每当 Angular 完成被投影组件内容的变更检测之后调用。")]),n._v(" "),e("p",[n._v("ngAfterContentInit() 和每次 ngDoCheck() 之后调用")]),n._v(" "),e("p",[e("strong",[n._v("ngAfterViewInit()")])]),n._v(" "),e("p",[n._v("当 Angular 初始化完组件视图及其子视图之后调用。")]),n._v(" "),e("p",[n._v("第一次 ngAfterContentChecked() 之后调用，只调用一次。")]),n._v(" "),e("p",[n._v("ngAfterViewChecked()")]),n._v(" "),e("p",[n._v("每当 Angular 做完组件视图和子视图的变更检测之后调用。")]),n._v(" "),e("p",[n._v("ngAfterViewInit() 和每次 ngAfterContentChecked() 之后调用。")]),n._v(" "),e("p",[e("strong",[n._v("ngOnDestroy()")])]),n._v(" "),e("p",[n._v("每当 Angular 每次销毁指令/组件之前调用并清扫。 在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。")]),n._v(" "),e("p",[n._v("在 Angular 销毁指令/组件之前调用。")])])}),[],!1,null,null,null);t.default=_.exports}}]);